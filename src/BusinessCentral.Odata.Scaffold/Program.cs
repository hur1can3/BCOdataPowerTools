using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;

using BusinessCentral.OData.Client.Configuration;
using BusinessCentral.OData.Client.Extensions;
using BusinessCentral.OData.Client.Http;
using BusinessCentral.OData.Client.Models;
using BusinessCentral.OData.Client.Querying;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

// --- POCO Classes (Example of what the scaffolder tool generates) ---

/// <summary>
/// Represents a Customer from Business Central.
/// Generated by BusinessCentral.OData.Scaffold.
/// </summary>
public class Customer
{
    [JsonPropertyName("id")]
    public Guid Id { get; set; }

    [JsonPropertyName("number")]
    public string? Number { get; set; }

    [JsonPropertyName("displayName")]
    public string? DisplayName { get; set; }

    [JsonPropertyName("balance")]
    public decimal? Balance { get; set; }

    [JsonPropertyName("lastModifiedDateTime")]
    public DateTimeOffset? LastModifiedDateTime { get; set; }
}

/// <summary>
/// Represents an Item from Business Central.
/// Generated by BusinessCentral.OData.Scaffold.
/// </summary>
public class Item
{
    [JsonPropertyName("id")]
    public Guid Id { get; set; }

    [JsonPropertyName("number")]
    public string? Number { get; set; }

    [JsonPropertyName("displayName")]
    public string? DisplayName { get; set; }

    [JsonPropertyName("unitPrice")]
    public decimal? UnitPrice { get; set; }
}

/// <summary>
/// Represents a Sales Order from Business Central.
/// Generated by BusinessCentral.OData.Scaffold.
/// </summary>
public class SalesOrder
{
    [JsonPropertyName("id")]
    public Guid Id { get; set; }

    [JsonPropertyName("number")]
    public string? Number { get; set; }

    [JsonPropertyName("orderDate")]
    public DateTime? OrderDate { get; set; }

    [JsonPropertyName("customerNumber")]
    public string? CustomerNumber { get; set; }

    // This property will be populated when using $expand
    public Customer? Customer { get; set; }
}

// --- Main Application ---
public class Program
{
    public static async Task Main(string[] args)
    {
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices((hostContext, services) =>
            {
                var configuration = hostContext.Configuration;

                // 1. Add the BusinessCentralClient using the extension method from the library
                services.AddBusinessCentralClient(
                    options => configuration.GetSection(BusinessCentralClientOptions.ConfigurationSectionName).Bind(options),
                    httpClientBuilder =>
                    {
                        // 2. Add a custom handler to inject the auth token on each request
                        httpClientBuilder.AddHttpMessageHandler(() =>
                            new AuthenticationDelegatingHandler(configuration["Authentication:BearerToken"] ?? string.Empty));
                    }
                );

                // 3. Register our main application logic service
                services.AddHostedService<CronusDemoRunner>();
            })
            .Build();

        await host.RunAsync();
    }
}

// --- Application Logic Runner ---
public class CronusDemoRunner : IHostedService
{
    private readonly ILogger<CronusDemoRunner> _logger;
    private readonly IBusinessCentralClient _bcClient;

    public CronusDemoRunner(ILogger<CronusDemoRunner> logger, IBusinessCentralClient bcClient)
    {
        _logger = logger;
        _bcClient = bcClient;
    }

    public async Task StartAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("--- BCOdataPowerTools Demo Starting ---");

        try
        {
            await DemoSelectAndFilterAsync();
            await DemoClientPagingAsync();
            await DemoServerPagingAsync();
            await DemoExpandAsync();
            await DemoComplexFilterAsync();
            await DemoBatchQueryAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred during the demo.");
        }

        _logger.LogInformation("\n--- Demo Finished ---");
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        return Task.CompletedTask;
    }

    private async Task DemoSelectAndFilterAsync()
    {
        _logger.LogInformation("\n[1. DEMO: $filter and $select - Get top 3 customers with a balance, but only select their Number and DisplayName]");
        var query = new ODataQueryBuilder<Customer>()
            .Filter(c => c.Balance > 0)
            .OrderByDescending(c => c.Balance)
            .Select(c => new { c.Number, c.DisplayName }) // Select specific fields
            .Top(3);

        var response = await _bcClient.GetEntitiesAsync(query);
        if (response.IsSuccessStatusCode)
        {
            // Note: The 'Balance' property will be null/default because we didn't select it.
            response.Value?.ForEach(c => _logger.LogInformation("  - Customer: {Number}, Name: {Name}", c.Number, c.DisplayName));
        }
    }

    private async Task DemoClientPagingAsync()
    {
        _logger.LogInformation("\n[2. DEMO: Client-Side Pagination - Use $top and $skip to manually page through items]");
        const int pageSize = 2;
        for (int page = 0; page < 3; page++)
        {
            _logger.LogInformation("  - Requesting Page {PageNumber} (Page Size: {PageSize})", page + 1, pageSize);
            var query = new ODataQueryBuilder<Item>()
                .OrderBy(i => i.Number)
                .Skip(page * pageSize)
                .Top(pageSize);

            var response = await _bcClient.GetEntitiesAsync(query);
            response.Value?.ForEach(i => _logger.LogInformation("    - Item: {Number}, Name: {Name}", i.Number, i.DisplayName));
        }
    }

    private async Task DemoServerPagingAsync()
    {
        _logger.LogInformation("\n[3. DEMO: Server-Side Pagination - Use GetAllPagesAsync to automatically follow nextLinks]");
        var query = new ODataQueryBuilder<Item>();

        // This will automatically follow all @odata.nextLink pages until all items are retrieved.
        var allItems = await _bcClient.GetAllPagesAsync(query);
        _logger.LogInformation("  - Total items found across all pages: {Count}", allItems.Count);
    }

    private async Task DemoExpandAsync()
    {
        _logger.LogInformation("\n[4. DEMO: $expand - Get the most recent sales order and expand its related Customer entity]");
        var query = new ODataQueryBuilder<SalesOrder>()
            .OrderByDescending(so => so.OrderDate)
            .Expand(so => so.Customer!) // Use the null-forgiving operator to ensure the type matches the 'class' constraint
            .Top(1);

        var response = await _bcClient.GetEntitiesAsync(query);
        var latestOrder = response.Value?.FirstOrDefault();

        if (latestOrder != null)
        {
            // The Customer property is populated because we used .Expand()
            var customerName = latestOrder.Customer?.DisplayName ?? "N/A";
            _logger.LogInformation("  - Latest Order #{OrderNumber} belongs to Customer: {CustomerName}", latestOrder.Number, customerName);
        }
    }

    private async Task DemoComplexFilterAsync()
    {
        _logger.LogInformation("\n[5. DEMO: Complex $filter - Find customers whose name contains 'School' OR whose balance is over 1000]");
        var query = new ODataQueryBuilder<Customer>()
            .Filter(c => (c.DisplayName != null && c.DisplayName.Contains("School", StringComparison.OrdinalIgnoreCase)) || (c.Balance.HasValue && c.Balance.Value > 1000));

        var response = await _bcClient.GetEntitiesAsync(query);
        _logger.LogInformation("  - Found {Count} customers matching the complex filter.", response.Value?.Count ?? 0);
        response.Value?.ForEach(c => _logger.LogInformation("    - Customer: {Number}, Name: {Name}", c.Number, c.DisplayName));
    }

    private async Task DemoBatchQueryAsync()
    {
        _logger.LogInformation("\n[6. DEMO: $batch Query - Get top customer and top item in a single HTTP request]");

        var customerQuery = new ODataQueryBuilder<Customer>().OrderByDescending(c => c.Balance).Top(1);
        var itemQuery = new ODataQueryBuilder<Item>().OrderByDescending(i => i.UnitPrice).Top(1);

        var batchResponse = await _bcClient.SendJsonBatchAsync(default, customerQuery, itemQuery);

        if (batchResponse.IsSuccessStatusCode && batchResponse.BatchResponses != null)
        {
            // Find and deserialize the customer response
            var customerBatchPart = batchResponse.BatchResponses.FirstOrDefault(r => r.Id == "1");
            var topCustomer = customerBatchPart?.DeserializeBodyAs<ODataResponse<Customer>>()?.Value?.FirstOrDefault();
            if (topCustomer != null)
            {
                _logger.LogInformation("  - Top Customer from Batch: {Name} (Balance: {Balance:C})", topCustomer.DisplayName, topCustomer.Balance);
            }

            // Find and deserialize the item response
            var itemBatchPart = batchResponse.BatchResponses.FirstOrDefault(r => r.Id == "2");
            var topItem = itemBatchPart?.DeserializeBodyAs<ODataResponse<Item>>()?.Value?.FirstOrDefault();
            if (topItem != null)
            {
                _logger.LogInformation("  - Top Item from Batch: {Name} (Price: {Price:C})", topItem.DisplayName, topItem.UnitPrice);
            }
        }
    }
}

// --- Authentication Helper ---
public class AuthenticationDelegatingHandler : DelegatingHandler
{
    private readonly string _token;
    public AuthenticationDelegatingHandler(string token)
    {
        _token = token;
    }

    protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(_token))
        {
            throw new InvalidOperationException("BearerToken is not configured. Please check your appsettings.json.");
        }

        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _token);
        return base.SendAsync(request, cancellationToken);
    }
}
